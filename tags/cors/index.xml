<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cors on 凝雨 - Yun</title>
    <link>https://ningyu1.github.io/site/tags/cors/</link>
    <description>Recent content in Cors on 凝雨 - Yun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Aug 2018 14:50:00 +0000</lastBuildDate>
    
	<atom:link href="https://ningyu1.github.io/site/tags/cors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用downloadjs下载并且重命名文件名称引发的跨域问题</title>
      <link>https://ningyu1.github.io/site/post/95-downloadjs-cors/</link>
      <pubDate>Thu, 02 Aug 2018 14:50:00 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/95-downloadjs-cors/</guid>
      <description>我们有一部分静态资源放在fastdfs文件服务器上，并且文件名称是生成的随机数，直接浏览器下载是可以正常下载文件的，但是我们需要修改下载文件的名称，直接a标签href是无法修改下载文件名称的。
使用a标签的download属性又有浏览器兼容问题，而且download属性有一个弊端，只有点击右键另存为才会生效，直接点击是不生效的。
因此我们这里借助了一个组件downloadjs来进行文件下载，它可以修改下载文件的名称，并且也没有浏览器兼容问题，原理呢很简单那，使用ajax请求去下载文件，在发起请求时构造请求header来重命名下载文件名。
但是这里会存在一个问题？我们的fastdfs和应用程序是独立的两个域，因此存在跨域的问题，直接使用a标签的href是不存在跨域的问题，按关于这个跨域的问题我们如何解决？
先来看一下使用downloadjs下载fastdfs的文件时报出的跨域错误信息如下
Failed to load http://192.168.0.48:8079/group1/M00/03/35/wKgAMFtgB2SAFjibAAX3egrfUI8922.doc: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:8080&#39; is therefore not allowed access.  本地使用是通过vue的proxyTable绕过跨域的问题，其实就是前端的proxy方式虚拟一个context然后pass转发，虽然这样可以解决目前的问题，但是我们在uat和prd环境又要增加相同的context path的映射，这不是我们想要的，我们想直接访问下载地址来进行下载，因此我们需要修改fastdfs的nginx模块配置。
跨域的配置这里就不多说了，其实就是添加一系列的Access-Control-Allow-X的header即可，不会的可以参考我以前的文章跨域踩坑经验总结》，唯一需要注意的是，当使用Access-Control-Allow-Credentials=true时Access-Control-Allow-Origin不允许使用* 必须使用具体的域名多个可以使用,分割。
修改后我们可以直接的请求地址下载文件即可。</description>
    </item>
    
    <item>
      <title>跨域踩坑经验总结（内涵：跨域知识科普）</title>
      <link>https://ningyu1.github.io/site/post/92-cors-ajax/</link>
      <pubDate>Wed, 27 Jun 2018 12:20:00 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/92-cors-ajax/</guid>
      <description>跨域问题是我们非常常见的问题，尤其在跨系统页面间的调用经常会遇到，解决的方式在网上一搜一大把，这里整理出我遇到跨域问题解决的方式以及思路，如何安全的解决跨域调用请继续往下看。
 什么是跨域？ 跨域使用的场景？ 解决跨域的方式？ 前端、后端如何配合处理跨域？  跨域常见错误 突如其来的OPTIONS请求？ 后端需要返回的Header有哪些？ 前端如何配合发起请求？ Ajax跨域请求跨平台兼容性问题   什么是跨域？ 什么是Cross-origin_resource_sharing? 跨域请求存在的原因：由于浏览器的同源策略，即属于不同域的页面之间不能相互访问各自的页面内容。
跨域使用的场景？  域名不同  www.jiuyescm.com和www.jiuye.com即为不同的域名  二级域名相同，子域名不同  a.jiuyescm.com和b.jiuyescm.com为子域不同  端口不同，协议不同  http://www.jiuyescm.com和https://www.jiuyescm.com www.jiuyescm.com:8888和www.jiuyescm.com:8080   解决跨域的方式？  jsonp  安全性差，已经不推荐  CORS（W3C标准，跨域资源共享 - Cross-origin resource sharing）  服务端设置，安全性高，推荐使用  websocke  特殊场景时使用，不属于常规跨域操作  代理服务（nginx）  可作为服务端cors配置的一种方式，推荐使用   前端、后端如何配合处理跨域？ ps. 我们这里只介绍：CORS处理方式。
跨域常见错误 首先让我们看一下前端报出的跨域错误信息
第一种：No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource，并且The response had HTTP status code 404</description>
    </item>
    
  </channel>
</rss>