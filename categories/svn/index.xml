<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Svn on 凝雨 - Yun</title>
    <link>https://ningyu1.github.io/site/categories/svn/</link>
    <description>Recent content in Svn on 凝雨 - Yun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Mar 2018 10:44:53 +0000</lastBuildDate>
    
	<atom:link href="https://ningyu1.github.io/site/categories/svn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Subversion库如何全文检索代码？</title>
      <link>https://ningyu1.github.io/site/post/72-svn-query/</link>
      <pubDate>Fri, 23 Mar 2018 10:44:53 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/72-svn-query/</guid>
      <description>现在是Git流行的年代，在Git的套件里想要全文检索代码也有很多方案，Git也支持命令直接检索代码，但是当使用svn的用户代码检索应该如何处理呢？
在回答前面问题之前我们还要搞清楚另外一个问题，我们为什么要检索代码？
有的时候我们想从所有的代码库去寻找使用相同方法的代码，常规做法就是checkout下来所有的项目，然后通过IDE工具去关联检索使用到某个方法的代码，但是这样做比较耗费时间而且当项目过多IDE不一定能扛得住。还有的时候我们想从规范角度去check开发人员写的代码是否有违规的或者有问题的，就可以通过检索去寻找，当然规范的check有更好的工具，可以使用scm工具sonar去check代码它整合了很多check模版。
鉴于上面种种的原因对代码做检索还是很有必要的，接下来我们就说一下使用svn时如何全文检索代码。
我们可以先说一个思路，把代码灌入elasticsearch、lucene、solr，然后通过ui去搜索这是一条可行的路子。
这两天发现了一个工具svnquery很好用，它使用ASP.net开发，采用Lucene生成索引，提供GUI和WEB工具通过索引文件来检索代码。
svnquery官网
它提供三个程序，一个svnindex用于通过svn库生成索引目录
SvnIndex.exe %aciton% %index_path% %svn_path% -u 用户名 -p 密码  ps. action包括create、update，更新和修改
执行后会生成一个索引目录，可以通过svnfind工具可以选择索引目录来进行代码搜索，svnfind是一个GUI工具。
还可以通过SvnWebQuery来进行代码搜索，SvnWebQuery是一个.NET的web程序需要放入IIS服务器来使用
引用官网的两张图
唯一的缺点就是需要一个库一个库的生成索引，没有批量生成svn路径下所有有权限的库，如果有这个功能我个人觉得就完美了。
好了工具介绍到这里，如果有用svn的想对代码进行检索的可以使用这个工具。</description>
    </item>
    
    <item>
      <title>Jenkins、SVN、MAVEN打包时区问题解决方案</title>
      <link>https://ningyu1.github.io/site/post/47-jenkins-svn-maven-timezone/</link>
      <pubDate>Tue, 09 Jan 2018 18:30:36 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/47-jenkins-svn-maven-timezone/</guid>
      <description>目录  Jenkins时区设置问题 SVN更新代码时区问题 MAVEN打包时区问题  一、Jenkins时区设置问题 docker@jenkins:~$ cat /etc/default/jenkins|grep 2048 JAVA_ARGS=&amp;quot;-Xmx2048m -Xms2048m -XX:PermSize=512m -XX:MaxPermSize=512m -Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai -Djava.awt.headless=true&amp;quot; # Allow graphs etc. to work even when an X server is present  增加时区参数：-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Shanghai
修改启动后查看jenkins系统参数：
二、SVN更新代码时区问题 svn时区依赖jenkins的时区设置
没有修改时区之前：
能看的出来revision时间是有问题的跟我们机器时间不一致少了8小时
修复这个问题有两个方法
 可以通过设置svn路径后增加@HEAD忽略掉revision来修复这个问题，具体设置如下   修改jenkins时区，参考第一个问题  jenkins时区设置完之后svn拉取代码会自动修改：revision，如图   三、MAVEN打包时区问题 我项目中使用的是maven自己的timestamp
&amp;lt;timestamp&amp;gt;${maven.build.timestamp}&amp;lt;/timestamp&amp;gt;  它的问题是：时区是UTC而且无法修改，如果要使用GMT+8，就需要插件提供支持
使用maven utc的timestamp构建出来的包名如下：
我使用插件：build-helper-maven-plugin
在pom中增加plugin build-helper-maven-plugin来覆盖maven的timestamp变量：
&amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;timestamp-property&amp;lt;/id&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;timestamp-property&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;name&amp;gt;timestamp&amp;lt;/name&amp;gt; &amp;lt;pattern&amp;gt;yyyyMMddHHmm&amp;lt;/pattern&amp;gt; &amp;lt;timeZone&amp;gt;GMT+8&amp;lt;/timeZone&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;  然后打包测试：</description>
    </item>
    
    <item>
      <title>分支(branche)开发，主干(trunk)发布</title>
      <link>https://ningyu1.github.io/site/post/08-svn-trunk-branche/</link>
      <pubDate>Tue, 20 Dec 2016 14:32:41 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/08-svn-trunk-branche/</guid>
      <description>主干，分支分开开发模式在使用的时候要注意，主干是不做任何代码修改，只负责merge，修改全在分支上，不管是新功能的开发分支，还是修复bug的分支，如果线上有紧急bug修复，要先容trunk上拉一个bugfix分支出来，修改提交然后在merge到主干上去 ，打包测试发包。
图示：
注意事项： 本地修改的代码不要藏在本地 不提交，如果发现没有地方可以提交，提交会影响版本发布，那就是主干、分支开发模式使用不当，请及时调整</description>
    </item>
    
    <item>
      <title>SVN设置文件忽略的多种方法</title>
      <link>https://ningyu1.github.io/site/post/10-svn-ignore/</link>
      <pubDate>Sat, 26 Nov 2016 10:30:34 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/10-svn-ignore/</guid>
      <description>方法一： 在svn客户端（小乌龟），想设置忽略提交.class文件，通过 properties -&amp;gt; New -&amp;gt; Other 添加一个忽略的属性，，还是不行：部分屏蔽了，部分class还是在列表中
方法二： 在svn客户端（小乌龟）：Settings -&amp;gt; General -&amp;gt; Global ignore pattern 添加了一个 *.class就行了
方法三： 在 Eclipse 中点击菜单 window -&amp;gt; Preferences -&amp;gt; Team -&amp;gt; Ignored Resources
点击 Add Pattern… 按钮添加你要忽略的文件或目录
方法四： 在Eclipse的导航视图中，选中尚未加入版本控制的文件或目录，右键 -&amp;gt; Team -&amp;gt; 添加至SVN:ignore
方法五： 在资源管理器中，右键一个未加入版本控制文件或目录，并从弹出菜单选择TortoiseSVN -&amp;gt; Add to Ignore List，会出现一个子菜单，允许你仅选择该文件或者所有具有相同后缀的文件。
如果你想从忽略列表中移除一个或多个条目，右击这些条目，选择TortoiseSVN -&amp;gt; 从忽略列表删除。</description>
    </item>
    
  </channel>
</rss>