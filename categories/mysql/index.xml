<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 凝雨 - Yun</title>
    <link>https://ningyu1.github.io/site/categories/mysql/</link>
    <description>Recent content in Mysql on 凝雨 - Yun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Apr 2018 18:02:00 +0000</lastBuildDate>
    
	<atom:link href="https://ningyu1.github.io/site/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySql Lock wait timeout exceeded该如何处理？</title>
      <link>https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/</link>
      <pubDate>Sun, 08 Apr 2018 18:02:00 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/</guid>
      <description>这个问题我相信大家对它并不陌生，但是有很多人对它产生的原因以及处理吃的不是特别透，很多情况都是交给DBA去定位和处理问题，接下来我们就针对这个问题来展开讨论。
Mysql造成锁的情况有很多，下面我们就列举一些情况：
 执行DML操作没有commit，再执行删除操作就会锁表。 在同一事务内先后对同一条数据进行插入和更新操作。 表索引设计不当，导致数据库出现死锁。 长事物，阻塞DDL，继而阻塞所有同表的后续操作。  但是要区分的是Lock wait timeout exceeded与Dead Lock是不一样。
 Lock wait timeout exceeded：后提交的事务等待前面处理的事务释放锁，但是在等待的时候超过了mysql的锁等待时间，就会引发这个异常。 Dead Lock：两个事务互相等待对方释放相同资源的锁，从而造成的死循环，就会引发这个异常。  还有一个要注意的是innodb_lock_wait_timeout与lock_wait_timeout也是不一样的。
 innodb_lock_wait_timeout：innodb的dml操作的行级锁的等待时间 lock_wait_timeout：数据结构ddl操作的锁的等待时间  如何查看innodb_lock_wait_timeout的具体值？
SHOW VARIABLES LIKE &#39;innodb_lock_wait_timeout&#39;  如何修改innode lock wait timeout的值？
参数修改的范围有Session和Global，并且支持动态修改，可以有两种方法修改：
方法一：
通过下面语句修改
set innodb_lock_wait_timeout=100; set global innodb_lock_wait_timeout=100;  ps. 注意global的修改对当前线程是不生效的，只有建立新的连接才生效。
方法二：
修改参数文件/etc/my.cnf innodb_lock_wait_timeout = 50
ps. innodb_lock_wait_timeout指的是事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败； 当锁等待超过设置时间的时候，就会报如下的错误；ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction。其参数的时间单位是秒，最小可设置为1s(一般不会设置得这么小)，最大可设置1073741824秒，默认安装时这个值是50s(默认参数设置)。
下面介绍在遇到这类问题该如何处理
问题现象  数据更新或新增后数据经常自动回滚。 表操作总报 Lock wait timeout exceeded 并长时间无反应  解决方法  应急方法：show full processlist; kill掉出现问题的进程。 ps.</description>
    </item>
    
    <item>
      <title>MySQL Gap Lock问题</title>
      <link>https://ningyu1.github.io/site/post/50-mysql-gap-lock/</link>
      <pubDate>Thu, 11 Jan 2018 17:10:36 +0000</pubDate>
      
      <guid>https://ningyu1.github.io/site/post/50-mysql-gap-lock/</guid>
      <description>文章来源：http://blog.chinaunix.net/uid-20726500-id-5749804.html 作者：@小桥河西
初识MySQL的gap，觉得这个设计比较独特，和其他数据库的做法不太一样，所以整理一个简单的memo（虽然关于gap锁，相关资料已经很多了）
一、什么是gap A place in an InnoDB index data structure where new values could be inserted.
说白了gap就是索引树中插入新记录的空隙。相应的gap lock就是加在gap上的锁，还有一个next-key锁，是记录+记录前面的gap的组合的锁。
二、gap锁或next-key锁的作用 http://dev.mysql.com/doc/refman/5.7/en/innodb-next-key-locking.html
To prevent phantoms, InnoDB uses an algorithm called next-key locking that combines index-row locking with gap locking. InnoDB performs row-level locking in such a way that when it searches or scans a table index, it sets shared or exclusive locks on the index records it encounters. Thus, the row-level locks are actually index-record locks.</description>
    </item>
    
  </channel>
</rss>